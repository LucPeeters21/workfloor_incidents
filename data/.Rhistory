aes(x = `NPS Score`,
y = resultaat,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 100), xlim = c(0, 70)) + geom_smooth(method="lm")
# plot total non-linear
ggplot(df,
aes(x = `NPS Score`,
y = resultaat,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 100), xlim = c(0, 70)) + geom_smooth()
model <- lm(resultaat ~ `NPS Score`*Doelgroep, data = df)
summary(model)
# plot total linear
ggplot(df,
aes(x = `NPS Score`,
y = resultaat,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 100), xlim = c(0, 70)) + geom_smooth(method="lm")
model <- lm(resultaat ~ `NPS Score`*Doelgroep, data = df)
summary(model)
# import dataframe
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS/Vraag 1 - Rendement NPS/teams_rendementen") # company comuter
df_result <- read_excel("teams_rendementen.xlsx")
df_nps_2020 <- read_excel("teams_nps_2020.xlsx")
df_nps_2021 <- read_excel("teams_nps_2021.xlsx")
df_nps_2022 <- read_excel("teams_nps_2022.xlsx")
df_channel <- read_excel("kanaal_pz.xlsx")
# rename teams
df_result <-  df_result %>% rename(Team = Teams)
# divide team number and name
df_nps_2020 <- separate(df_nps_2020, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_nps_2021 <- separate(df_nps_2021, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_nps_2022 <- separate(df_nps_2022, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_result <- separate(df_result, col=Team, into =c("team_id", "team_name"), sep=" - ")
# merge
df_2020 <- merge(df_result, df_nps_2020, by = 'team_id')
df_2021 <- merge(df_result, df_nps_2021, by = 'team_id')
df_2022 <- merge(df_result, df_nps_2022, by = 'team_id')
# select
df_2020 <- df_2020 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2020`, `Resultaat...20`)
df_2021 <- df_2021 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2021`, `Resultaat...17`)
df_2022 <- df_2022 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2022`, `Resultaat...14`)
# remove rows with few nps
df_2020 <- subset(df_2020, `Aantal NPS` > 10)
df_2021 <- subset(df_2021, `Aantal NPS` > 10)
df_2022 <- subset(df_2022, `Aantal NPS` > 10)
# divide omzet and result by 1000
df_2020$Resultaat...20 <- df_2020$Resultaat...20/1000
df_2020$`Omzet 2020` <- df_2020$`Omzet 2020`/1000
df_2021$Resultaat...17 <- df_2021$Resultaat...17/1000
df_2021$`Omzet 2021` <- df_2021$`Omzet 2021`/1000
df_2022$Resultaat...14 <- df_2022$Resultaat...14/1000
df_2022$`Omzet 2022` <- df_2022$`Omzet 2022`/1000
# remove totalen
df_2020 <- df_2020[df_2020$team_id != "Totalen", ]
df_2021 <- df_2021[df_2021$team_id != "Totalen", ]
df_2022 <- df_2022[df_2022$team_id != "Totalen", ]
# add clusters
df_2020$cluster[df_2020$team_id=="001010"|df_2020$team_id=="001011"|df_2020$team_id=="021010"|df_2020$team_id=="021011"|df_2020$team_id=="051020"|df_2020$team_id=="001023"|df_2020$team_id=="021014"] <- "beveiliging_onderhoud"
df_2020$cluster[df_2020$team_id=="004010"|df_2020$team_id=="004032"|df_2020$team_id=="014010"|df_2020$team_id=="027010"|df_2020$team_id=="034010"|df_2020$team_id=="053010"|df_2020$team_id=="024030"|df_2020$team_id=="034011"] <- "elektro"
df_2020$cluster[df_2020$team_id=="004110"|df_2020$team_id=="005990"|df_2020$team_id=="005996"|df_2020$team_id=="025110"|df_2020$team_id=="034110"|df_2020$team_id=="034112"|df_2020$team_id=="004126"|df_2020$team_id=="004128"] <- "werktuigbouw"
df_2020$cluster[df_2020$team_id=="034112"|df_2020$team_id=="065121"|df_2020$team_id=="104111"|df_2020$team_id=="104112"|df_2020$team_id=="104114"|df_2020$team_id=="104310"|df_2020$team_id=="105110"|df_2020$team_id=="035110"|df_2020$team_id=="005410"|df_2020$team_id=="064132"|df_2020$team_id=="064133"|df_2020$team_id=="104113"] <- "werktuigbouw_onderhoud"
df_2020$cluster[df_2020$team_id=="005240"|df_2020$team_id=="065121"|df_2020$team_id=="065121"|df_2020$team_id=="065121"|df_2020$team_id=="005210"] <- "elektro_onderhoud"
df_2021$cluster[df_2021$team_id=="001010"|df_2021$team_id=="001011"|df_2021$team_id=="021010"|df_2021$team_id=="021011"|df_2021$team_id=="051020"|df_2021$team_id=="021014"] <- "beveiliging_onderhoud"
df_2021$cluster[df_2021$team_id=="004010"|df_2021$team_id=="004032"|df_2021$team_id=="014010"|df_2021$team_id=="027010"|df_2021$team_id=="034010"|df_2021$team_id=="053010"|df_2021$team_id=="044011"|df_2021$team_id=="004033"|df_2021$team_id=="004053"|df_2021$team_id=="024032"|df_2021$team_id=="125011"] <- "elektro"
df_2021$cluster[df_2021$team_id=="004110"|df_2021$team_id=="005990"|df_2021$team_id=="005996"|df_2021$team_id=="025110"|df_2021$team_id=="034110"|df_2021$team_id=="034112"] <- "werktuigbouw"
df_2021$cluster[df_2021$team_id=="034112"|df_2021$team_id=="065121"|df_2021$team_id=="104111"|df_2021$team_id=="104112"|df_2021$team_id=="104114"|df_2021$team_id=="104310"|df_2021$team_id=="105110"|df_2021$team_id=="035110"|df_2021$team_id=="005110"|df_2021$team_id=="005121"|df_2021$team_id=="104113"|df_2021$team_id=="104115"|df_2021$team_id=="104311"|df_2021$team_id=="104312"|df_2021$team_id=="104314"] <- "werktuigbouw_onderhoud"
df_2021$cluster[df_2021$team_id=="005240"|df_2021$team_id=="005220"|df_2021$team_id=="005210"] <- "elektro_onderhoud"
df_2022$cluster[df_2022$team_id=="001010"|df_2022$team_id=="001011"|df_2022$team_id=="021010"|df_2022$team_id=="021011"|df_2022$team_id=="051020"|df_2022$team_id=="021014"|df_2022$team_id=="121010"|df_2022$team_id=="121011"|df_2022$team_id=="021012"] <- "beveiliging_onderhoud"
df_2022$cluster[df_2022$team_id=="004010"|df_2022$team_id=="004032"|df_2022$team_id=="014010"|df_2022$team_id=="027010"|df_2022$team_id=="034010"|df_2022$team_id=="053010"|df_2022$team_id=="044011"|df_2022$team_id=="004033"] <- "elektro"
df_2022$cluster[df_2022$team_id=="004110"|df_2022$team_id=="005990"|df_2022$team_id=="005996"|df_2022$team_id=="025110"|df_2022$team_id=="034110"|df_2022$team_id=="034112"|df_2022$team_id=="004131"|df_2022$team_id=="004132"|df_2022$team_id=="004134"|df_2022$team_id=="154111"] <- "werktuigbouw"
df_2022$cluster[df_2022$team_id=="034112"|df_2022$team_id=="065121"|df_2022$team_id=="104111"|df_2022$team_id=="104112"|df_2022$team_id=="104114"|df_2022$team_id=="104310"|df_2022$team_id=="105110"|df_2022$team_id=="035110"|df_2022$team_id=="005110"|df_2022$team_id=="005121"|df_2022$team_id=="104113"|df_2022$team_id=="104115"|df_2022$team_id=="104311"|df_2022$team_id=="104312"|df_2022$team_id=="104314"|df_2022$team_id=="135111"|df_2022$team_id=="155110"|df_2022$team_id=="155111"|df_2022$team_id=="005310"] <- "werktuigbouw_onderhoud"
df_2022$cluster[df_2022$team_id=="005240"|df_2022$team_id=="005220"|df_2022$team_id=="004220"] <- "elektro_onderhoud"
# add constants for year
df_2020 <- df_2020 %>%
mutate(year = 2020)
df_2021 <- df_2021 %>%
mutate(year = 2021)
df_2022 <- df_2022 %>%
mutate(year = 2022)
# create one set
df_2020 <- df_2020 %>% rename(resultaat = Resultaat...20,
omzet = `Omzet 2020`)
df_2021 <- df_2021 %>% rename(resultaat = Resultaat...17,
omzet = `Omzet 2021`)
df_2022 <- df_2022 %>% rename(resultaat = Resultaat...14,
omzet = `Omzet 2022`)
df <- rbind(df_2020, df_2021, df_2022)
# add channel
df_channel <- df_channel %>% select(Team, Doelgroep)
df_channel <- separate(df_channel, col=Team, into =c("team_id", "team_name"), sep=" - ")
df <- merge(df, df_channel, by = 'team_id')
# add ratio of result as column
df$ratio <- df$result/df$omzet
# plot data
ggplot(df_2020,
aes(x = `NPS Score`,
y = resultaat)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 400), xlim = c(0, 60))
ggplot(df_2021,
aes(x = `NPS Score`,
y = resultaat)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 700), xlim = c(0, 70))
ggplot(df_2022,
aes(x = `NPS Score`,
y = resultaat)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 400), xlim = c(0, 70))
# plot total
ggplot(df,
aes(x = `NPS Score`,
y = resultaat)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 400), xlim = c(0, 70))
# plot total linear
ggplot(df,
aes(x = `NPS Score`,
y = resultaat,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 100), xlim = c(0, 70)) + geom_smooth(method="lm")
ggplot(df,
aes(x = `NPS Score`,
y = ratio,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 100), xlim = c(0, 70)) + geom_smooth(method="lm")
# plot total linear
ggplot(df,
aes(x = `NPS Score`,
y = ratio,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(0, 1), xlim = c(0, 70)) + geom_smooth(method="lm")
View(df)
# plot total linear
ggplot(df,
aes(x = `NPS Score`,
y = ratio,
colour = Doelgroep)) +
geom_point(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Team rendement") +
xlab("NPS") + ylab("Resultaat*1000") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
coord_cartesian(ylim = c(-1, 1), xlim = c(0, 70)) + geom_smooth(method="lm")
View(df)
df %>% count(Doelgroep, cluster)
# import dataframe
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS/Vraag 1 - Rendement NPS/teams_rendementen") # company comuter
df_result <- read_excel("teams_rendementen.xlsx")
df_nps_2020 <- read_excel("teams_nps_2020.xlsx")
df_nps_2021 <- read_excel("teams_nps_2021.xlsx")
df_nps_2022 <- read_excel("teams_nps_2022.xlsx")
df_channel <- read_excel("kanaal_pz.xlsx")
# rename teams
df_result <-  df_result %>% rename(Team = Teams)
# divide team number and name
df_nps_2020 <- separate(df_nps_2020, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_nps_2021 <- separate(df_nps_2021, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_nps_2022 <- separate(df_nps_2022, col=Team, into =c("team_id", "team_name"), sep=" - ")
df_result <- separate(df_result, col=Team, into =c("team_id", "team_name"), sep=" - ")
# merge
df_2020 <- merge(df_result, df_nps_2020, by = 'team_id')
df_2021 <- merge(df_result, df_nps_2021, by = 'team_id')
df_2022 <- merge(df_result, df_nps_2022, by = 'team_id')
# select
df_2020 <- df_2020 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2020`, `Resultaat...20`)
df_2021 <- df_2021 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2021`, `Resultaat...17`)
df_2022 <- df_2022 %>% select(team_id, team_name.x, `NPS Score`, `Aantal NPS`, `#Promoters`, `#Passives`, `#Detractors`, `Omzet 2022`, `Resultaat...14`)
# remove rows with few nps
df_2020 <- subset(df_2020, `Aantal NPS` > 20)
df_2021 <- subset(df_2021, `Aantal NPS` > 20)
df_2022 <- subset(df_2022, `Aantal NPS` > 20)
# divide omzet and result by 1000
df_2020$Resultaat...20 <- df_2020$Resultaat...20/1000
df_2020$`Omzet 2020` <- df_2020$`Omzet 2020`/1000
df_2021$Resultaat...17 <- df_2021$Resultaat...17/1000
df_2021$`Omzet 2021` <- df_2021$`Omzet 2021`/1000
df_2022$Resultaat...14 <- df_2022$Resultaat...14/1000
df_2022$`Omzet 2022` <- df_2022$`Omzet 2022`/1000
# remove totalen
df_2020 <- df_2020[df_2020$team_id != "Totalen", ]
df_2021 <- df_2021[df_2021$team_id != "Totalen", ]
df_2022 <- df_2022[df_2022$team_id != "Totalen", ]
# add clusters
df_2020$cluster[df_2020$team_id=="001010"|df_2020$team_id=="001011"|df_2020$team_id=="021010"|df_2020$team_id=="021011"|df_2020$team_id=="051020"|df_2020$team_id=="001023"|df_2020$team_id=="021014"] <- "beveiliging_onderhoud"
df_2020$cluster[df_2020$team_id=="004010"|df_2020$team_id=="004032"|df_2020$team_id=="014010"|df_2020$team_id=="027010"|df_2020$team_id=="034010"|df_2020$team_id=="053010"|df_2020$team_id=="024030"|df_2020$team_id=="034011"] <- "elektro"
df_2020$cluster[df_2020$team_id=="004110"|df_2020$team_id=="005990"|df_2020$team_id=="005996"|df_2020$team_id=="025110"|df_2020$team_id=="034110"|df_2020$team_id=="034112"|df_2020$team_id=="004126"|df_2020$team_id=="004128"] <- "werktuigbouw"
df_2020$cluster[df_2020$team_id=="034112"|df_2020$team_id=="065121"|df_2020$team_id=="104111"|df_2020$team_id=="104112"|df_2020$team_id=="104114"|df_2020$team_id=="104310"|df_2020$team_id=="105110"|df_2020$team_id=="035110"|df_2020$team_id=="005410"|df_2020$team_id=="064132"|df_2020$team_id=="064133"|df_2020$team_id=="104113"] <- "werktuigbouw_onderhoud"
df_2020$cluster[df_2020$team_id=="005240"|df_2020$team_id=="065121"|df_2020$team_id=="065121"|df_2020$team_id=="065121"|df_2020$team_id=="005210"] <- "elektro_onderhoud"
df_2021$cluster[df_2021$team_id=="001010"|df_2021$team_id=="001011"|df_2021$team_id=="021010"|df_2021$team_id=="021011"|df_2021$team_id=="051020"|df_2021$team_id=="021014"] <- "beveiliging_onderhoud"
df_2021$cluster[df_2021$team_id=="004010"|df_2021$team_id=="004032"|df_2021$team_id=="014010"|df_2021$team_id=="027010"|df_2021$team_id=="034010"|df_2021$team_id=="053010"|df_2021$team_id=="044011"|df_2021$team_id=="004033"|df_2021$team_id=="004053"|df_2021$team_id=="024032"|df_2021$team_id=="125011"] <- "elektro"
df_2021$cluster[df_2021$team_id=="004110"|df_2021$team_id=="005990"|df_2021$team_id=="005996"|df_2021$team_id=="025110"|df_2021$team_id=="034110"|df_2021$team_id=="034112"] <- "werktuigbouw"
df_2021$cluster[df_2021$team_id=="034112"|df_2021$team_id=="065121"|df_2021$team_id=="104111"|df_2021$team_id=="104112"|df_2021$team_id=="104114"|df_2021$team_id=="104310"|df_2021$team_id=="105110"|df_2021$team_id=="035110"|df_2021$team_id=="005110"|df_2021$team_id=="005121"|df_2021$team_id=="104113"|df_2021$team_id=="104115"|df_2021$team_id=="104311"|df_2021$team_id=="104312"|df_2021$team_id=="104314"] <- "werktuigbouw_onderhoud"
df_2021$cluster[df_2021$team_id=="005240"|df_2021$team_id=="005220"|df_2021$team_id=="005210"] <- "elektro_onderhoud"
df_2022$cluster[df_2022$team_id=="001010"|df_2022$team_id=="001011"|df_2022$team_id=="021010"|df_2022$team_id=="021011"|df_2022$team_id=="051020"|df_2022$team_id=="021014"|df_2022$team_id=="121010"|df_2022$team_id=="121011"|df_2022$team_id=="021012"] <- "beveiliging_onderhoud"
df_2022$cluster[df_2022$team_id=="004010"|df_2022$team_id=="004032"|df_2022$team_id=="014010"|df_2022$team_id=="027010"|df_2022$team_id=="034010"|df_2022$team_id=="053010"|df_2022$team_id=="044011"|df_2022$team_id=="004033"] <- "elektro"
df_2022$cluster[df_2022$team_id=="004110"|df_2022$team_id=="005990"|df_2022$team_id=="005996"|df_2022$team_id=="025110"|df_2022$team_id=="034110"|df_2022$team_id=="034112"|df_2022$team_id=="004131"|df_2022$team_id=="004132"|df_2022$team_id=="004134"|df_2022$team_id=="154111"] <- "werktuigbouw"
df_2022$cluster[df_2022$team_id=="034112"|df_2022$team_id=="065121"|df_2022$team_id=="104111"|df_2022$team_id=="104112"|df_2022$team_id=="104114"|df_2022$team_id=="104310"|df_2022$team_id=="105110"|df_2022$team_id=="035110"|df_2022$team_id=="005110"|df_2022$team_id=="005121"|df_2022$team_id=="104113"|df_2022$team_id=="104115"|df_2022$team_id=="104311"|df_2022$team_id=="104312"|df_2022$team_id=="104314"|df_2022$team_id=="135111"|df_2022$team_id=="155110"|df_2022$team_id=="155111"|df_2022$team_id=="005310"] <- "werktuigbouw_onderhoud"
df_2022$cluster[df_2022$team_id=="005240"|df_2022$team_id=="005220"|df_2022$team_id=="004220"] <- "elektro_onderhoud"
# add constants for year
df_2020 <- df_2020 %>%
mutate(year = 2020)
df_2021 <- df_2021 %>%
mutate(year = 2021)
df_2022 <- df_2022 %>%
mutate(year = 2022)
# create one set
df_2020 <- df_2020 %>% rename(resultaat = Resultaat...20,
omzet = `Omzet 2020`)
df_2021 <- df_2021 %>% rename(resultaat = Resultaat...17,
omzet = `Omzet 2021`)
df_2022 <- df_2022 %>% rename(resultaat = Resultaat...14,
omzet = `Omzet 2022`)
df <- rbind(df_2020, df_2021, df_2022)
# add channel
df_channel <- df_channel %>% select(Team, Doelgroep)
df_channel <- separate(df_channel, col=Team, into =c("team_id", "team_name"), sep=" - ")
df <- merge(df, df_channel, by = 'team_id')
# add ratio of result as column
df$ratio <- df$result/df$omzet
df %>% count(Doelgroep, cluster)
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
library(scales)
library(stringr)
library(Hmisc)
library(forcats)
library(ggthemes)
# import customer data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Thesis/The-Super-Promotor/data")
df <- read_csv("df_long.csv")
df <- df[df$nps_category != "no_reply", ]
# import warranty projects data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS/Vraag 1 - Rendement NPS")
df_projects <- read_xlsx("Garantieprojecten Hoppenbrouwers.xlsx")
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
library(scales)
library(stringr)
library(Hmisc)
library(forcats)
library(ggthemes)
# import customer data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Thesis/The-Super-Promotor/data")
df <- read_csv("df_long.csv")
df <- df[df$nps_category != "no_reply", ]
# import warranty projects data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS/Vraag 1 - Rendement NPS/garantieprojecten")
df_projects <- read_xlsx("Garantieprojecten Hoppenbrouwers.xlsx")
clients <- read_xlsx("klantnummers.xlsx")
costs <- read.csv("kosten.csv", sep =";")
clients <- clients %>% distinct(Opdrachtgever, .keep_all = TRUE) # Remove duplicates
df_projects <- df_projects %>% rename(Opdrachtgever = Rijlabels)
df_projects <- merge(clients, df_projects, by = 'Opdrachtgever')
# clean costs table
costs <- costs %>% rename(costs = Totale.kosten)
costs <- costs[!grepl("Niet", costs$costs),]
costs <- costs[!grepl("€", costs$costs),]
costs$costs <- gsub(",", "", costs$costs)
costs$costs <- as.numeric(costs$costs)/100
costs_aggr <- costs %>% group_by(Opdrachtgever.code) %>%
summarise(sum_costs = sum(costs),
.groups = 'drop')
# select relevant variables from df
df <- df %>% select(client_id, client_name, business_channel, turnover, costs, result, first_purchase, first_nps, first_comment,
second_purchase, second_nps, second_comment, nps_mean, nps_category, profitability)
# merge df_projects and df
df_projects <- df_projects %>% rename(client_id = `Opdrachtgever code`)
costs_aggr <- costs_aggr %>% rename(client_id = Opdrachtgever.code)
aggr <- merge(df_projects, costs_aggr, by = 'client_id')
aggr <- aggr %>% rename(client_name = Opdrachtgever)
# merge df and aggr
df <- merge(df, aggr, by = "client_id")
# plot data
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
ggplot(data=df, aes(x=nps_category, y=sum_costs)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500)) +
labs(title="Kosten per NPS categorie",x="NPS", y = "Kosten") +
scale_color_brewer(palette="Paired")+
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
View(df)
df %>% count(business_channel)
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
# plot data
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs, fill=business_channel)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
# plot data
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
# plot data
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs, fill=business_channel, alpha=business_channel)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
ggplot(data=df, aes(x=nps_category, y=sum_costs, fill=business_channel, alpha=business_channel)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500)) +
labs(title="Kosten per NPS categorie",x="NPS", y = "Kosten") +
scale_color_brewer(palette="Paired")+
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
ggplot(data=df, aes(x=as.factor(`Aantal van Code`), y=sum_costs, fill=business_channel, alpha=business_channel)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500), xlim = c(1, 3)) +
labs(title="Kosten per garantieproject",x="# Garantieprojecten", y = "Kosten") + scale_color_brewer(palette="Paired") +
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
ggplot(data=df, aes(x=nps_category, y=sum_costs, fill=business_channel, alpha=business_channel)) + geom_boxplot(color="black", fill="lightblue", alpha=0.8) + coord_cartesian(ylim = c(0, 500)) +
labs(title="Kosten per NPS categorie",x="NPS", y = "Kosten") +
scale_color_brewer(palette="Paired")+
theme_minimal() + stat_summary(fun.y=mean, geom="point", shape=1, size=5, color="red", fill="red") + geom_jitter()
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
# Import dataframe
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS") # company comuter
df_long <- read.csv("df_email_level_full.csv")
# Filter NPS providers only
df_nps <- df_long %>% select(client_id, business_channel, nps_mean, first_nps, first_comment, first_date,
second_nps, second_comment, second_date,
third_nps, third_comment, third_date,
fourth_nps, fourth_comment, fourth_date,
fifth_nps, fifth_comment, fifth_date,
sixth_nps, sixth_comment, sixth_date, turnover, costs, result)
# Create column indicating response
df_nps <- df_nps %>% mutate(response =
case_when(nps_mean >= 0 ~ "1"))
df_nps$response[is.na(df_nps$response)] <- "0"
df <- df_nps %>% select(client_id, business_channel, response, nps_mean, turnover, costs, result)
# add characteristics of customers
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Project NPS")
df_cities <- read_csv("steden_relaties.csv")  # city
df_cities <- df_cities %>% rename(client_id = Code,
city = `Post-/ bezoekadres plaats`,
postcode = `Post-/ bezoekadres postcode`,
address = `Post-/ bezoekadres adres`)
df <- merge(df, df_cities, by = 'client_id')
df <- df %>% select(-Relatienaam, -`Telefoon 1`, -`Telefoon 2`)
# remove rows from cities with small amount of appearances
df <- subset(df, with(df, unsplit(table(city), city)) >= 100)
# logistic regression on response using city
#model_city <- glm(as.factor(response) ~ as.factor(city)*business_channel, family=binomial, data=df)
#summary(model_city)
#model_nps <- lm(nps_mean ~ as.factor(city)+business_channel, family=binomial, data=df)
#summary(model_nps)
total_requests_per_city <- df %>% count(city, business_channel)
df_responses <- df %>% group_by(city, business_channel) %>% count(response)
df_responses_true <- df_responses[!(df_responses$response=="0"),]
ratios_responses_city <- left_join(total_requests_per_city, df_responses_true, by = 'city')
ratios_responses_city <- ratios_responses_city %>% select(-response)
ratios_responses_city <- ratios_responses_city %>% rename(sent = n.x,
response = n.y)
ratios_responses_city$ratio <- ratios_responses_city$response/ratios_responses_city$sent * 100
ratios_responses_city_z <-subset(ratios_responses_city, business_channel.x !="P" & business_channel.y!="P")
ratios_responses_city_p <-subset(ratios_responses_city, business_channel.x !="Z" & business_channel.y!="Z")
ratios <- rbind(ratios_responses_city_p, ratios_responses_city_z)
ratios <- ratios %>% select(-business_channel.x)
ratios <- ratios %>% rename(business_channel = business_channel.y)
# graph for B2C
ggplot(ratios_responses_city_p,
aes(x = city,
y = ratio)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Respons per plaats particulier") +
xlab("Plaats") + ylab("Respons ratio") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 70) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# graph for B2C
ggplot(ratios_responses_city_z,
aes(x = city,
y = ratio)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Respons per plaats zakelijk") +
xlab("Plaats") + ylab("Respons ratio") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 70) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# total graph
ggplot(ratios,
aes(x = city,
y = ratio,
fill = business_channel)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Respons per plaats") +
xlab("Plaats") + ylab("Respons ratio") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 70) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) #+
geom_hline(yintercept=45)
# mean nps per city
df <- df %>% drop_na(nps_mean)
df_means <- df %>% group_by(city, business_channel) %>% summarise_at(vars(nps_mean), list(mean = mean))
ggplot(df_means,
aes(x = city,
y = mean,
fill = business_channel)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("Respons per plaats") +
xlab("Plaats") + ylab("Respons ratio") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 10) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(df_means,
aes(x = city,
y = mean,
fill = business_channel)) +
geom_bar(stat = "identity", color = "black", position = position_dodge()) + ggtitle("NPS per plaats") +
xlab("Plaats") + ylab("NPS") + #geom_text(aes(label = sprintf("%1.1f%%", ratio*1)), vjust=4, color="black", size=4, angle = 30) + theme_linedraw() +
scale_fill_manual(values=c('#999999','#E69F00')) + scale_fill_brewer(palette="Blues") + ylim(0, 10) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
library(scales)
library(stringr)
library(Hmisc)
library(forcats)
library(ggthemes)
setwd("C:\Users\LPEE\OneDrive - Hoppenbrouwers Techniek B.V\Documenten\Oefendata")
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Oefendata")
read_excel("Kopie van sampledatasafety.xlsx")
read_excel("Kopie van sampledatasafety.xlsx")
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Oefendata")
read_excel("Kopie van sampledatasafety.xlsx")
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Oefendata")
read_excel("Kopie van sampledatasafety.xlsx")
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Oefendata/samplesafety")
read_excel("safetydata.xlsx")
df <- read_excel("safetydata.xlsx")
View(df)
View(df)
library(haven)
library(dplyr)
library(car)
library(emmeans)
library(effectsize)
library(dataPreparation)
library(readxl)
library(stringr)
library(tidyr)
library(data.table)
library(tidyverse)
library(scales)
library(stringr)
library(Hmisc)
library(forcats)
library(ggthemes)
# import data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Oefendata/samplesafety")
df <- read_excel("safetydata.xlsx")
View(df)
View(df)
# pie charts descriptive
location_table <-  table(df$`Injury Location`)
df %>% count(df$`Injury Location`)
pie(location_table,labels=c("Abdomen","Arms", "Back", "Eye", "Feet", "Hands", "Head", "Legs", "Multiple", "Neck", "Trunk"))
View(df)
gender_table <- table(df$Gender)
df %>% count(Gender)
pie(gender_table, labels=c("Male", "Female"))
pie(gender_table, labels=c("Female", "Male"))
pie(gender_table, labels=c("Female", "Male"), main="Incident Ratio between Gender")
pie(gender_table, labels=c("Female", "Male"), main="Incident Ratio Between Gender")
View(df)
# import data
setwd("C:/Users/LPEE/OneDrive - Hoppenbrouwers Techniek B.V/Documenten/Projects/workfloor_incidents/data")
df <- read_excel("safetydata.xlsx")
